upstream frps_upstream {
    server frps:8080;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

init_by_lua_block {
    get_user_balance = function(user_id)
        local http = require "resty.http"
        local httpc = http.new()
        httpc:set_timeout(5000)

        local url = "http://grpc-gateway:8081/databus.credits.v1.RpcCreditsService/query"
        local headers = {
            ["Content-Type"] = "application/json"
        }

        local body = '{"userId":"' .. user_id .. '"}'

        local res, err = httpc:request_uri(url, {
            method = "POST",
            body = body,
            headers = headers,
            ssl_verify = false
        })

        if not res then
            ngx.say("Request failed: ", err)
            return
        end

        return res
    end
    consume_tokens = function(user_id, tokens)
        local http = require "resty.http"
        local httpc = http.new()
        httpc:set_timeout(5000)

        local url = "http://grpc-gateway:8081/databus.credits.v1.RpcCreditsService/consume"
        local headers = {
            ["Content-Type"] = "application/json"
        }

        local body = '{"userId":"' .. user_id .. '", "token": "' .. tokens .. '"}'

        local res, err = httpc:request_uri(url, {
            method = "POST",
            body = body,
            headers = headers,
            ssl_verify = false
        })

        if not res then
            ngx.say("Request failed: ", err)
            return
        end
    end

    random_number = function(min, max)
        local random = require "resty.random"
        -- Ensure min is less than max
        if min > max then
            min, max = max, min
        end

        local range = max - min + 1
        local bits_needed = math.ceil(math.log(range) / math.log(2))
        local bytes_needed = math.ceil(bits_needed / 8)
        local max_value = 2^(bytes_needed * 8) - 1
        local acceptable_max = max_value - (max_value % range)

        while true do
            local rnd_bytes = random.bytes(bytes_needed)
            local rnd_number = 0

            for i = 1, bytes_needed do
                rnd_number = rnd_number * 256 + rnd_bytes:byte(i)
            end

            if rnd_number < acceptable_max then
                return min + (rnd_number % range)
            end
            -- If not, try again (this will be rare)
        end
    end

    dispatch_node = function(red, host_domain, root_domain)
        local key = "domain_nodes_weights::" .. host_domain
        
        local res, err

        while true do
            -- Get the last member with its score
            local last, err = red:zrange(key, -1, -1, "WITHSCORES")

            if not last then
                ngx.log(ngx.ERR, "failed to get last node member of ", origin_host, ": ", err)
                return
            end

            if last == ngx.null or last[1] == nil then
                ngx.log(ngx.ERR, "last node member of ", origin_host, " not found.")
                return
            end

            local rand_score = 1
            local last_score = tonumber(last[2])

            if last_score == 0 then
                ngx.log(ngx.ERR, "last score is 0 from ", origin_host)
                return
            elseif last_score == 1 then
            else
                rand_score = random_number(1, last_score)
            end

            res, err = red:zrange(key, rand_score, "+inf", "BYSCORE", "LIMIT", 0, 1)

            if not res or res == ngx.null or res[1] == nil then
            else
                break
            end
        end
        
        ngx.log(ngx.DEBUG, "Found node from ", origin_host, ": ", res[1])

        ngx.var.node_domain = res[1] .. root_domain
    end

    check_auth = function(red)
        local cjson = require "cjson"
        local resty_md5 = require "resty.md5"
        local resty_string = require "resty.string"

        local auth_header = ngx.var.http_authorization
        if not auth_header or not auth_header:find("Bearer ") then
            ngx.log(ngx.ERR, "Authorization header is missing or invalid")
            -- ngx.exit(ngx.HTTP_UNAUTHORIZED)
            return
        end
        local api_key = auth_header:sub(8) -- Extract the api_key from the header
        if not api_key then
            ngx.log(ngx.ERR, "API key is missing")
            -- ngx.exit(ngx.HTTP_UNAUTHORIZED)
            return
        end
        local md5 = resty_md5:new()
        if not md5 then
            ngx.log(ngx.ERR, "Cannot create the md5 object")
            -- ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
        end
        md5:update(api_key)
        local key_hash_binary = md5:final()
        local key_hash = resty_string.to_hex(key_hash_binary)
        ngx.var.key_hash = key_hash

        local user_id, err = red:get("api_key_hash::" .. key_hash)
        if not user_id then
            ngx.log(ngx.ERR, "failed to get api_key: ", err)
            -- ngx.exit(ngx.HTTP_UNAUTHORIZED)
            return
        end
        if user_id == ngx.null then
            ngx.log(ngx.ERR, "api_key not found: ", api_key)
            -- ngx.exit(ngx.HTTP_UNAUTHORIZED)
            return
        end
        ngx.var.user_id = user_id


        local res, err = get_user_balance(user_id)
        -- Ignore if failed to get your balance
        if res and res.status == 200 then
            local success, json_res = pcall(cjson.decode, res.body)
            if success and json_res then
                local balance = tonumber(json_res.balance)
                if balance and balance < 10 then
                    ngx.log(ngx.ERR, "Insufficient user balance ", balance)
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("Insufficient balance to complete the request")
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            end
        end
    end
}

server {
    server_name *.yourdomain.ai;

    # Used by lua for connecting redis
    resolver 127.0.0.11;

    access_log /logs/nginx/ai_access.log main;
    error_log /logs/nginx/ai_error.log error;

    lua_need_request_body on;

    location = /favicon.ico {return 200 "";}

    set $node_domain $http_host;
    set $user_id "";
    set $key_hash "";

    access_by_lua_block {
        local redis = require "resty.redis"
        local red = redis:new()
        
        red:set_timeouts(100, 100, 100) -- 100 millisec
        
        local ok, err = red:connect("redis", 6379)
        
        if not ok then
            ngx.log(ngx.ERR, "failed to connect to Redis: ", err)
            -- ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
        end
        
        red:select(0)

        local origin_host = ngx.var.host
        local start_index, end_index = string.find(origin_host, ".", 1, true)
        local host_domain = string.sub(origin_host, 1, start_index - 1)
        local root_domain = string.sub(origin_host, start_index)
        
        if string.sub(origin_host, 1, 2) == "0x" then
            local domain, err = red:get("node_domain::" .. host_domain)
            if not domain or domain == ngx.null then
                -- Check the length of host_domain
                if string.len(host_domain) == 40 then
                    -- Access the node directly if it has not joined any domain
                else
                    check_auth(red)
                    dispatch_node(red, host_domain, root_domain)
                end
            else
                -- Not allowed to access the node directly if it has joined one domain
                red:set_keepalive()
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("The node " .. host_domain .. " has joined the domain, access " .. domain .. root_domain .. " instead")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
        else
            check_auth(red)
            dispatch_node(red, host_domain, root_domain)
        end

        red:set_keepalive()
    }

    add_header X-Node-Domain $node_domain;

    location / {
        proxy_pass http://frps_upstream;
        proxy_set_header Host $node_domain;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /v1/chat/completions {
        access_log  /logs/nginx/access_tokens.log log_req_resp;
        set $resp_header_user "";
        header_filter_by_lua_block{
            local rh = ngx.resp.get_headers();
            for k, v in pairs(rh) do
                if k == "user" then
                    ngx.var.resp_header_user = ngx.var.resp_header_user .. v;
                end
            end
        }

        set $resp_body "";
        body_filter_by_lua '
            local cjson = require "cjson"
            local resp_body = ngx.arg[1]

            if string.find(resp_body, "total_tokens") then
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
            end
            if ngx.arg[2] then
                ngx.var.resp_body = ngx.ctx.buffered
                local success, json_res = pcall(cjson.decode, ngx.var.resp_body)
                if success and json_res then
                    local tokens = tonumber(json_res.usage.totel_tokens)
                    if tokens and tokens > 0 then
                        consume_tokens(ngx.var.user_id, tokens)
                    end
                end
            end
        ';

        proxy_max_temp_file_size 0;
        proxy_pass http://frps_upstream;
        proxy_set_header Host $node_domain;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /config_pub {
        proxy_set_header Host $node_domain;
        proxy_pass http://frps_upstream;
        add_header 'Access-Control-Allow-Origin' *;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
    }
}
